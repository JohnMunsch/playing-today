{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/lit-html/lib/directive.js","webpack:///./node_modules/lit-html/lib/dom.js","webpack:///./node_modules/lit-html/lib/part.js","webpack:///./node_modules/lit-html/lib/template.js","webpack:///./node_modules/lit-html/lib/template-instance.js","webpack:///./node_modules/lit-html/lib/template-result.js","webpack:///./node_modules/lit-html/lib/parts.js","webpack:///./node_modules/lit-html/lib/default-template-processor.js","webpack:///./node_modules/lit-html/lib/template-factory.js","webpack:///./node_modules/lit-html/lib/render.js","webpack:///./node_modules/lit-html/lit-html.js","webpack:///./node_modules/lit-html/lib/modify-template.js","webpack:///./node_modules/lit-html/lib/shady-render.js","webpack:///./node_modules/@polymer/lit-element/lib/updating-element.js","webpack:///./node_modules/@polymer/lit-element/lib/decorators.js","webpack:///./node_modules/@polymer/lit-element/lit-element.js","webpack:///./app/js/recommended-players.component.js","webpack:///./app/js/games-list.component.js","webpack:///./app/js/game-tabs.component.js","webpack:///./app/js/nav-bar.component.js","webpack:///./app/js/players-list.component.js","webpack:///./app/js/main-page.js","webpack:///./app/js/playing-today-app.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","directives","WeakMap","isDirective","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","startNode","endNode","node","nextSibling","removeChild","noChange","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","[object Object]","result","element","this","parts","index","partIndex","nodesToRemove","_prepareTemplate","template","content","walker","document","createTreeWalker","previousNode","currentNode","nextNode","nodeType","hasAttributes","attributes","count","length","indexOf","stringForPart","strings","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","getAttribute","split","push","type","removeAttribute","tagName","nodeValue","parent","parentNode","lastIndex","insertBefore","createMarker","createTextNode","previousSibling","Node","TEXT_NODE","isTemplatePartActive","part","createComment","template_instance_TemplateInstance","processor","options","_parts","values","setValue","commit","fragment","cloneNode","importNode","nodeIndex","_prepareInstance","handleTextExpression","insertAfterNode","handleAttributeExpressions","nodeName","adoptNode","upgrade","template_result_TemplateResult","endIndex","html","addedMarker","replace","_match","whitespace","createElement","innerHTML","getHTML","isPrimitive","AttributeCommitter","dirty","_createPart","parts_AttributePart","text","v","Array","isArray","iterator","setAttribute","_getValue","comitter","committer","directive","parts_NodePart","_pendingValue","appendChild","ref","_insert","_commitText","_commitTemplateResult","_commitNode","_commitIterable","clear","textContent","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","parts_BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","parts_EventPart","eventName","eventContext","_boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","_options","getOptions","event","defaultTemplateProcessor","prefix","templateCache","templateCaches","stringsArray","keyString","Map","set","join","getTemplateElement","render_parts","lit_html_html","walkerNodeFilter","NodeFilter","SHOW_ELEMENT","SHOW_COMMENT","SHOW_TEXT","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","DOCUMENT_FRAGMENT_NODE","startIndex","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","style","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","nativeShadow","querySelector","removes","fromBooleanAttribute","toBooleanAttribute","notEqual","old","defaultPropertyDeclaration","attribute","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_changedProperties","_reflectingProperties","initialize","observedAttributes","_finalize","_classProperties","attr","_attributeNameForProperty","_attributeToPropertyMap","superProperties","getPrototypeOf","k","oldValue","_requestPropertyUpdate","configurable","_finalized","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","Boolean","toAttribute","renderRoot","createRenderRoot","_saveInstanceProperties","constructor","attachShadow","styleElement","requestUpdate","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","_invalidate","_valueHasChanged","updateComplete","_hasRequestedUpdate","resolver","previousValidatePromise","_validate","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","size","_propertyToAttribute","_query","target","selector","queryFn","proto","lit_element_LitElement","templateResult","render","localName","hasRendered","needsScoping","ShadowRoot","firstScopeRender","renderContainer","createDocumentFragment","assign","appendInto","delete","host","define","games","log","map","game","remove","renderListOfGames","numPlayers","Number","user","signOutEvent","CustomEvent","detail","message","dispatchEvent","signOut","email","players","player","uid","playingToday","playing","renderControlsOrStatus","playersIn","renderListOfPlayers","playersOut","notes","numberOfPlayers","0","best","not","recommended","1","2","3","4","5","6","7","playingStatusChanged"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive so that lit-html will call the function\n * during template rendering, rather than passing as a value.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object\n *\n * @example\n *\n * ```\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n * ```\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => typeof o === 'function' && directives.has(o);\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !== undefined;\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        const _prepareTemplate = (template) => {\n            const content = template.content;\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                   NodeFilter.SHOW_TEXT */, null, false);\n            // The actual previous node, accounting for removals: if a node is removed\n            // it will never be the previousNode.\n            let previousNode;\n            // Used to set previousNode at the top of the loop.\n            let currentNode;\n            while (walker.nextNode()) {\n                index++;\n                previousNode = currentNode;\n                const node = currentNode = walker.currentNode;\n                if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                    if (node.hasAttributes()) {\n                        const attributes = node.attributes;\n                        // Per\n                        // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                        // attributes are not guaranteed to be returned in document order.\n                        // In particular, Edge/IE can return them out of order, so we cannot\n                        // assume a correspondance between part index and attribute index.\n                        let count = 0;\n                        for (let i = 0; i < attributes.length; i++) {\n                            if (attributes[i].value.indexOf(marker) >= 0) {\n                                count++;\n                            }\n                        }\n                        while (count-- > 0) {\n                            // Get the template literal section leading up to the first\n                            // expression in this attribute\n                            const stringForPart = result.strings[partIndex];\n                            // Find the attribute name\n                            const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                            // Find the corresponding attribute\n                            // All bound attributes have had a suffix added in\n                            // TemplateResult#getHTML to opt out of special attribute\n                            // handling. To look up the attribute value we also need to add\n                            // the suffix.\n                            const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                            const attributeValue = node.getAttribute(attributeLookupName);\n                            const strings = attributeValue.split(markerRegex);\n                            this.parts.push({ type: 'attribute', index, name, strings });\n                            node.removeAttribute(attributeLookupName);\n                            partIndex += strings.length - 1;\n                        }\n                    }\n                    if (node.tagName === 'TEMPLATE') {\n                        _prepareTemplate(node);\n                    }\n                }\n                else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                    const nodeValue = node.nodeValue;\n                    if (nodeValue.indexOf(marker) < 0) {\n                        continue;\n                    }\n                    const parent = node.parentNode;\n                    const strings = nodeValue.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        parent.insertBefore((strings[i] === '') ? createMarker() :\n                            document.createTextNode(strings[i]), node);\n                        this.parts.push({ type: 'node', index: index++ });\n                    }\n                    parent.insertBefore(strings[lastIndex] === '' ?\n                        createMarker() :\n                        document.createTextNode(strings[lastIndex]), node);\n                    nodesToRemove.push(node);\n                }\n                else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                    if (node.nodeValue === marker) {\n                        const parent = node.parentNode;\n                        // Add a new marker node to be the startNode of the Part if any of\n                        // the following are true:\n                        //  * We don't have a previousSibling\n                        //  * previousSibling is being removed (thus it's not the\n                        //    `previousNode`)\n                        //  * previousSibling is not a Text node\n                        //\n                        // TODO(justinfagnani): We should be able to use the previousNode\n                        // here as the marker node and reduce the number of extra nodes we\n                        // add to a template. See\n                        // https://github.com/PolymerLabs/lit-html/issues/147\n                        const previousSibling = node.previousSibling;\n                        if (previousSibling === null || previousSibling !== previousNode ||\n                            previousSibling.nodeType !== Node.TEXT_NODE) {\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        else {\n                            index--;\n                        }\n                        this.parts.push({ type: 'node', index: index++ });\n                        nodesToRemove.push(node);\n                        // If we don't have a nextSibling add a marker node.\n                        // We don't have to check if the next node is going to be removed,\n                        // because that node will induce a new marker if so.\n                        if (node.nextSibling === null) {\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        else {\n                            index--;\n                        }\n                        currentNode = previousNode;\n                        partIndex++;\n                    }\n                    else {\n                        let i = -1;\n                        while ((i = node.nodeValue.indexOf(marker, i + 1)) !== -1) {\n                            // Comment node has a binding marker inside, make an inactive part\n                            // The binding won't work, but subsequent bindings will\n                            // TODO (justinfagnani): consider whether it's even worth it to\n                            // make bindings in comments work\n                            this.parts.push({ type: 'node', index: -1 });\n                        }\n                    }\n                }\n            }\n        };\n        _prepareTemplate(element);\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this._parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // When using the Custom Elements polyfill, clone the node, rather than\n        // importing it, to keep the fragment in the template's document. This\n        // leaves the fragment inert so custom elements won't upgrade and\n        // potentially modify their contents by creating a polyfilled ShadowRoot\n        // while we traverse the tree.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        let partIndex = 0;\n        let nodeIndex = 0;\n        const _prepareInstance = (fragment) => {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            let node = walker.nextNode();\n            // Loop through all the nodes and parts of a template\n            while (partIndex < parts.length && node !== null) {\n                const part = parts[partIndex];\n                // Consecutive Parts may have the same node index, in the case of\n                // multiple bound attributes on an element. So each iteration we either\n                // increment the nodeIndex, if we aren't on a node with a part, or the\n                // partIndex if we are. By not incrementing the nodeIndex when we find a\n                // part, we allow for the next part to be associated with the current\n                // node if neccessasry.\n                if (!isTemplatePartActive(part)) {\n                    this._parts.push(undefined);\n                    partIndex++;\n                }\n                else if (nodeIndex === part.index) {\n                    if (part.type === 'node') {\n                        const part = this.processor.handleTextExpression(this.options);\n                        part.insertAfterNode(node);\n                        this._parts.push(part);\n                    }\n                    else {\n                        this._parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n                    }\n                    partIndex++;\n                }\n                else {\n                    nodeIndex++;\n                    if (node.nodeName === 'TEMPLATE') {\n                        _prepareInstance(node.content);\n                    }\n                    node = walker.nextNode();\n                }\n            }\n        };\n        _prepareInstance(fragment);\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const endIndex = this.strings.length - 1;\n        let html = '';\n        for (let i = 0; i < endIndex; i++) {\n            const s = this.strings[i];\n            // This replace() call does two things:\n            // 1) Appends a suffix to all bound attribute names to opt out of special\n            // attribute value parsing that IE11 and Edge do, like for style and\n            // many SVG attributes. The Template class also appends the same suffix\n            // when looking up attributes to creat Parts.\n            // 2) Adds an unquoted-attribute-safe marker for the first expression in\n            // an attribute. Subsequent attribute expressions will use node markers,\n            // and this is safe since attributes with multiple expressions are\n            // guaranteed to be quoted.\n            let addedMarker = false;\n            html += s.replace(lastAttributeNameRegex, (_match, whitespace, name, value) => {\n                addedMarker = true;\n                return whitespace + name + boundAttributeSuffix + value + marker;\n            });\n            if (!addedMarker) {\n                html += nodeMarker;\n            }\n        }\n        return html + this.strings[endIndex];\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => (value === null ||\n    !(typeof value === 'object' || typeof value === 'function'));\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (v != null &&\n                    (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n                else {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\nexport class AttributePart {\n    constructor(comitter) {\n        this.value = undefined;\n        this.committer = comitter;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Inserts this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n     * its next sibling must be static, unchanging nodes such as those that appear\n     * in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part._insert(this.startNode = createMarker());\n        part._insert(this.endNode = createMarker());\n    }\n    /**\n     * Appends this part after `ref`\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref._insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        const value = this._pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this._commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this._commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this._commitNode(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._commitIterable(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._commitText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this.value = value;\n    }\n    _commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.textContent = value;\n        }\n        else {\n            this._commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    _commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value && this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this._commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    _commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const value = !!this._pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        this.value = value;\n        this._pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this._boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const newListener = this._pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        if (shouldAddListener) {\n            this._options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        this.value = newListener;\n        this._pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const comitter = new PropertyCommitter(element, name.slice(1), strings);\n            return comitter.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const comitter = new AttributeCommitter(element, name, strings);\n        return comitter.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected.` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (renderedDOM, template, scopeName) => {\n    shadyRenderSet.add(scopeName);\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    // If there are no styles, there's no work to do.\n    if (styles.length === 0) {\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < styles.length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    insertNodeIntoTemplate(template, condensedStyle, template.element.content.firstChild);\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n    if (window.ShadyCSS.nativeShadow) {\n        // When in native Shadow DOM, re-add styling to rendered content using\n        // the style ShadyCSS produced.\n        const style = template.element.content.querySelector('style');\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else {\n        // When not in native Shadow DOM, at this point ShadyCSS will have\n        // removed the style from the lit template and parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        template.element.content.insertBefore(condensedStyle, template.element.content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document <head>.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in <style> elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (e.g.\n * Promise.resolve()), or be deferred until the element's `connectedCallback`\n * first runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (e.g. via `:host`) or via a rule that directly matches an element\n * with a shadowRoot. In other words, instead of flowing from parent to child as\n * do native css custom properties, shimmed custom properties flow only from\n * shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = container instanceof ShadowRoot &&\n        compatibleShadyCSSVersion && result instanceof TemplateResult;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        if (part.value instanceof TemplateInstance) {\n            prepareTemplateStyles(renderContainer, part.value.template, scopeName);\n        }\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// serializer/deserializers for boolean attribute\nconst fromBooleanAttribute = (value) => value !== null;\nconst toBooleanAttribute = (value) => value ? '' : null;\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = new Promise((resolve) => resolve(true));\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING = 1 << 3;\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're _finalized.\n        this._finalize();\n        const attributes = [];\n        for (const [p, v] of this._classProperties) {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        }\n        return attributes;\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty('_classProperties')) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n        this._classProperties.set(name, options);\n        // Allow user defined accessors by not replacing an existing own-property\n        // accessor.\n        if (this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            get() { return this[key]; },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestPropertyUpdate(name, oldValue, options);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     */\n    static _finalize() {\n        if (this.hasOwnProperty('_finalized') && this._finalized) {\n            return;\n        }\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (typeof superCtor._finalize === 'function') {\n            superCtor._finalize();\n        }\n        this._finalized = true;\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        const props = this.properties;\n        // support symbols in properties (IE11 does not support this)\n        const propKeys = [\n            ...Object.getOwnPropertyNames(props),\n            ...(typeof Object.getOwnPropertySymbols === 'function')\n                ? Object.getOwnPropertySymbols(props)\n                : []\n        ];\n        for (const p of propKeys) {\n            // note, use of `any` is due to TypeSript lack of support for symbol in\n            // index types\n            this.createProperty(p, props[p]);\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options !== undefined && options.attribute;\n        return attribute === false\n            ? undefined\n            : (typeof attribute === 'string'\n                ? attribute\n                : (typeof name === 'string' ? name.toLowerCase()\n                    : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's `type`\n     * or `type.fromAttribute` property option.\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options && options.type;\n        if (type === undefined) {\n            return value;\n        }\n        // Note: special case `Boolean` so users can use it as a `type`.\n        const fromAttribute = type === Boolean\n            ? fromBooleanAttribute\n            : (typeof type === 'function' ? type : type.fromAttribute);\n        return fromAttribute ? fromAttribute(value) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options === undefined || options.reflect === undefined) {\n            return;\n        }\n        // Note: special case `Boolean` so users can use it as a `type`.\n        const toAttribute = options.type === Boolean\n            ? toBooleanAttribute\n            : (options.type &&\n                options.type.toAttribute ||\n                String);\n        return toAttribute(value);\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this.renderRoot = this.createRenderRoot();\n        this._saveInstanceProperties();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        for (const [p] of this.constructor\n            ._classProperties) {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        }\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        for (const [p, v] of this._instanceProperties) {\n            this[p] = v;\n        }\n        this._instanceProperties = undefined;\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Uses ShadyCSS to keep element DOM updated.\n     */\n    connectedCallback() {\n        if ((this._updateState & STATE_HAS_UPDATED)) {\n            if (window.ShadyCSS !== undefined) {\n                window.ShadyCSS.styleElement(this);\n            }\n        }\n        else {\n            this.requestUpdate();\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() { }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attrValue = ctor._propertyValueToAttribute(value, options);\n        if (attrValue !== undefined) {\n            const attr = ctor._attributeNameForProperty(name, options);\n            if (attr !== undefined) {\n                // Track if the property is being reflected to avoid\n                // setting the property again via `attributeChangedCallback`. Note:\n                // 1. this takes advantage of the fact that the callback is synchronous.\n                // 2. will behave incorrectly if multiple attributes are in the reaction\n                // stack at time of calling. However, since we process attributes\n                // in `update` this should not be possible (or an extreme corner case\n                // that we'd like to discover).\n                // mark state reflecting\n                this._updateState = this._updateState | STATE_IS_REFLECTING;\n                if (attrValue === null) {\n                    this.removeAttribute(attr);\n                }\n                else {\n                    this.setAttribute(attr, attrValue);\n                }\n                // mark state not reflecting\n                this._updateState = this._updateState & ~STATE_IS_REFLECTING;\n            }\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (!(this._updateState & STATE_IS_REFLECTING)) {\n            const ctor = this.constructor;\n            const propName = ctor._attributeToPropertyMap.get(name);\n            if (propName !== undefined) {\n                const options = ctor._classProperties.get(propName);\n                this[propName] =\n                    ctor._propertyValueFromAttribute(value, options);\n            }\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        if (name !== undefined) {\n            const options = this.constructor\n                ._classProperties.get(name) ||\n                defaultPropertyDeclaration;\n            return this._requestPropertyUpdate(name, oldValue, options);\n        }\n        return this._invalidate();\n    }\n    /**\n     * Requests an update for a specific property and records change information.\n     * @param name {PropertyKey} name of requesting property\n     * @param oldValue {any} old value of requesting property\n     * @param options {PropertyDeclaration}\n     */\n    _requestPropertyUpdate(name, oldValue, options) {\n        if (!this.constructor\n            ._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n            return this.updateComplete;\n        }\n        // track old value when changing.\n        if (!this._changedProperties.has(name)) {\n            this._changedProperties.set(name, oldValue);\n        }\n        // add to reflecting properties set\n        if (options.reflect === true) {\n            if (this._reflectingProperties === undefined) {\n                this._reflectingProperties = new Map();\n            }\n            this._reflectingProperties.set(name, options);\n        }\n        return this._invalidate();\n    }\n    /**\n     * Invalidates the element causing it to asynchronously update regardless\n     * of whether or not any property changes are pending. This method is\n     * automatically called when any registered property changes.\n     */\n    async _invalidate() {\n        if (!this._hasRequestedUpdate) {\n            // mark state updating...\n            this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n            let resolver;\n            const previousValidatePromise = this._updatePromise;\n            this._updatePromise = new Promise((r) => resolver = r);\n            await previousValidatePromise;\n            this._validate();\n            resolver(!this._hasRequestedUpdate);\n        }\n        return this.updateComplete;\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    /**\n     * Validates the element by updating it.\n     */\n    _validate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        if (this.shouldUpdate(this._changedProperties)) {\n            const changedProperties = this._changedProperties;\n            this.update(changedProperties);\n            this._markUpdated();\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n        else {\n            this._markUpdated();\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. This getter can be implemented to\n     * await additional state. For example, it is sometimes useful to await a\n     * rendered element before fulfilling this Promise. To do this, first await\n     * `super.updateComplete` then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() { return this._updatePromise; }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated DOM in the element's\n     * `renderRoot`. Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            for (const [k, v] of this._reflectingProperties) {\n                this._propertyToAttribute(k, this[k], v);\n            }\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) { }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) { }\n}\n/**\n * Maps attribute names to properties; for example `foobar` attribute\n * to `fooBar` property.\n */\nUpdatingElement._attributeToPropertyMap = new Map();\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement._finalized = true;\n/**\n * Memoized list of all class properties, including any superclass properties.\n */\nUpdatingElement._classProperties = new Map();\nUpdatingElement.properties = {};\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n *\n * In TypeScript, the `tagName` passed to `customElement` should be a key of the\n * `HTMLElementTagNameMap` interface. To add your element to the interface,\n * declare the interface in this module:\n *\n *     @customElement('my-element')\n *     export class MyElement extends LitElement {}\n *\n *     declare global {\n *       interface HTMLElementTagNameMap {\n *         'my-element': MyElement;\n *       }\n *     }\n *\n */\nexport const customElement = (tagName) => (clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason. `Constructor<HTMLElement>`\n    // is helpful to make sure the decorator is applied to elements however.\n    return clazz;\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n */\nexport const property = (options) => (proto, name) => {\n    proto.constructor.createProperty(name, options);\n};\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n */\nexport const query = _query((target, selector) => target.querySelector(selector));\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n */\nexport const queryAll = _query((target, selector) => target.querySelectorAll(selector));\n/**\n * Base-implementation of `@query` and `@queryAll` decorators.\n *\n * @param queryFn exectute a `selector` (ie, querySelector or querySelectorAll)\n * against `target`.\n */\nfunction _query(queryFn) {\n    return (selector) => (proto, propName) => {\n        Object.defineProperty(proto, propName, {\n            get() { return queryFn(this.renderRoot, selector); },\n            enumerable: true,\n            configurable: true,\n        });\n    };\n}\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options) => (proto, name) => {\n    // This comment is here to fix a disagreement between formatter and linter\n    Object.assign(proto[name], options);\n};\n//# sourceMappingURL=decorators.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg } from 'lit-html/lit-html';\nexport class LitElement extends UpdatingElement {\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() { }\n}\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","import { LitElement, html } from '@polymer/lit-element';\n\nclass RecommendedPlayers extends LitElement {\n  createRenderRoot() {\n    return this;\n  }\n\n  render() {\n    return html`\n      <svg class=\"numPlayers\"></svg>\n    `;\n  }\n}\n\ncustomElements.define('recommended-players', RecommendedPlayers);\n","import { LitElement, html } from '@polymer/lit-element';\n\nimport './recommended-players.component';\n\nclass GamesList extends LitElement {\n  static get properties() {\n    return { games: { type: Array } };\n  }\n\n  remove() {}\n\n  createRenderRoot() {\n    return this;\n  }\n\n  renderListOfGames(games) {\n    console.log(games);\n    return games.map(game => {\n      return html`\n        <tr>\n          <td class=\"controls\">\n            <span\n              class=\"glyphicon glyphicon-remove-sign\"\n              aria-hidden=\"true\"\n              @click=\"${this.remove}\"\n            ></span>\n          </td>\n          <td class=\"name\">${game.name}</td>\n          <td>\n            <recommended-players\n              .num-players=\"game.numberOfPlayers\"\n            ></recommended-players>\n          </td>\n        </tr>\n      `;\n    });\n  }\n  render() {\n    return html`\n      <table class=\"table table-striped\">\n        <thead>\n          <tr>\n            <th></th>\n            <th>Game</th>\n            <th>Number of Players</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${this.renderListOfGames(this.games)}\n        </tbody>\n      </table>\n    `;\n  }\n}\n\ncustomElements.define('games-list', GamesList);\n","import { LitElement, html } from '@polymer/lit-element';\n\nimport './games-list.component.js';\n\nclass GameTabs extends LitElement {\n  static get properties() {\n    return { games: { type: Array }, numPlayers: { type: Number } };\n  }\n\n  createRenderRoot() {\n    return this;\n  }\n\n  render() {\n    return html`\n      <div class=\"gamesByPlayerCount\">\n        <!-- Nav tabs -->\n        <ul class=\"nav nav-tabs\" role=\"tablist\">\n          <li role=\"presentation\" class=\"active\" ng-if=\"$ctrl.numPlayers > 0\">\n            <a href=\"#tab-1\" aria-controls=\"home\" role=\"tab\" data-toggle=\"tab\">\n              Games for ${this.numPlayers} Players\n            </a>\n          </li>\n          <li\n            role=\"presentation\"\n            class=\"${this.numPlayers === 0 ? 'active' : ''}\"\n          >\n            <a\n              href=\"#tab-2\"\n              aria-controls=\"profile\"\n              role=\"tab\"\n              data-toggle=\"tab\"\n            >\n              All Games\n            </a>\n          </li>\n        </ul>\n\n        <!-- Tab panes -->\n        <div class=\"tab-content\">\n          <div role=\"tabpanel\" class=\"tab-pane active\" id=\"tab-1\">\n            <games-list\n              .games=\"${this.games}\"\n              .num-players=\"${this.numPlayers}\"\n            ></games-list>\n          </div>\n          <div role=\"tabpanel\" class=\"tab-pane\" id=\"tab-2\">\n            <games-list .games=\"${this.games}\"></games-list>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define('game-tabs', GameTabs);\n","import { LitElement, html } from '@polymer/lit-element';\n\nclass NavBar extends LitElement {\n  static get properties() {\n    return {\n      user: { type: Object }\n    };\n  }\n\n  signOut() {\n    let signOutEvent = new CustomEvent('sign-out', {\n      detail: { message: 'hello. a load-complete happened.' }\n    });\n    this.dispatchEvent(signOutEvent);\n  }\n\n  createRenderRoot() {\n    return this;\n  }\n\n  render() {\n    return html`\n      <nav class=\"navbar navbar-inverse navbar-fixed-top\" role=\"navigation\">\n        <div class=\"container\">\n          <div class=\"navbar-header\">\n            <button\n              type=\"button\"\n              class=\"navbar-toggle collapsed\"\n              data-toggle=\"collapse\"\n              data-target=\"#navbar\"\n              aria-expanded=\"false\"\n              aria-controls=\"navbar\"\n            >\n              <span class=\"sr-only\">Toggle navigation</span>\n              <span class=\"icon-bar\"></span> <span class=\"icon-bar\"></span>\n              <span class=\"icon-bar\"></span>\n            </button>\n            <a class=\"navbar-brand\" href=\"/\"\n              ><img class=\"logo\" src=\"img/meeple.svg\" />\n              <div>Playing today?</div></a\n            >\n          </div>\n          <div id=\"navbar\" class=\"navbar-collapse collapse\">\n            <form\n              class=\"navbar-form navbar-right\"\n              role=\"form\"\n              ng-if=\"this.user !== null\"\n            >\n              <button\n                type=\"submit\"\n                class=\"btn btn-success\"\n                @click=\"${this.signOut}\"\n              >\n                Sign out\n              </button>\n            </form>\n            <p class=\"navbar-text navbar-right\">${this.user.email}</p>\n          </div>\n          <!--/.navbar-collapse -->\n        </div>\n      </nav>\n    `;\n  }\n}\n\ncustomElements.define('nav-bar', NavBar);\n","import { LitElement, html } from '@polymer/lit-element';\n\nclass PlayersList extends LitElement {\n  static get properties() {\n    return {\n      user: { type: Object },\n      players: { type: Array }\n    };\n  }\n\n  playersIn(players) {\n    return 2;\n  }\n\n  playersOut(players) {\n    return 8;\n  }\n\n  renderControlsOrStatus(player, user) {\n    if (player.uid == user.uid) {\n      return html`\n        <div\n          class=\"btn-group btn-group-xs\"\n          role=\"group\"\n          aria-label=\"...\"\n          ng-if=\"$ctrl.active.uid === key\"\n        >\n          <button\n            type=\"button\"\n            class=\"btn btn-default\"\n            ng-click=\"$ctrl.playing({ uid: $ctrl.active.uid, name: $ctrl.active.email, playingToday: true })\"\n            ng-class=\"{ active: value.playingToday }\"\n          >\n            In\n          </button>\n          <button\n            type=\"button\"\n            class=\"btn btn-default\"\n            ng-click=\"$ctrl.playing({ uid: $ctrl.active.uid, name: $ctrl.active.email, playingToday: false })\"\n            ng-class=\"{ active: !value.playingToday }\"\n          >\n            Out\n          </button>\n        </div>\n      `;\n    } else {\n      return html`\n        <div>${player.playingToday ? 'In' : 'Out'}</div>\n      `;\n    }\n  }\n\n  renderListOfPlayers(players, user, playing) {\n    return players.map(player => {\n      if (player.playingToday == playing) {\n        return html`\n          <tr>\n            <td class=\"name\">${player.name}</td>\n            <td class=\"inOut\">${this.renderControlsOrStatus(player, user)}</td>\n          </tr>\n        `;\n      }\n    });\n  }\n\n  createRenderRoot() {\n    // This avoids us building our component with Shadow DOM so we can use Bootstrap\n    // or another CSS framework (which Shadow DOM would interfere with).\n    return this;\n  }\n\n  render() {\n    return html`\n      <h2>\n        In\n        <span class=\"label label-default\">${this.playersIn(this.players)}</span>\n      </h2>\n      <table class=\"table table-striped\">\n        <thead>\n          <tr>\n            <th>Player</th>\n            <th class=\"inOut\">In/Out</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${this.renderListOfPlayers(this.players, this.user, true)}\n        </tbody>\n      </table>\n\n      <h2>\n        Out\n        <span class=\"label label-default\"\n          >${this.playersOut(this.players)}</span\n        >\n      </h2>\n      <table class=\"table table-striped\">\n        <thead>\n          <tr>\n            <th>Player</th>\n            <th class=\"inOut\">In/Out</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${this.renderListOfPlayers(this.players, this.user, false)}\n        </tbody>\n      </table>\n    `;\n  }\n}\n\ncustomElements.define('players-list', PlayersList);\n","import { LitElement, html } from '@polymer/lit-element';\n\nimport './game-tabs.component';\nimport './nav-bar.component';\nimport './players-list.component';\n\nclass MainPage extends LitElement {\n  static get properties() {\n    return {\n      user: { type: Object },\n      games: { type: Array },\n      players: { type: Array }\n    };\n  }\n\n  constructor() {\n    super();\n\n    // Retrieve the list of games and associated info.\n    // If the user is logged in, obtain the user's data, player info, and\n    // subscribe to receive notifications about changes in player's status.\n    this.user = {\n      uid: '6plMXPEIgoO4CYNUHp6HZEuDQ352',\n      email: 'john.munsch@aptitude.com'\n    };\n\n    this.players = [\n      {\n        uid: '4ajsIxK3zJeCD39JoP0IDNGY4t82',\n        name: 'mike.wartberg@aptitude.com',\n        playingToday: false\n      },\n      {\n        uid: '6plMXPEIgoO4CYNUHp6HZEuDQ352',\n        name: 'john.munsch@aptitude.com',\n        playingToday: true\n      },\n      {\n        uid: 'CXbucJgnHcW6LK68blG3RVozg3D2',\n        name: 'trang.ngo@aptitude.com',\n        playingToday: false\n      },\n      {\n        uid: 'DcX0mno0e8T5ewKbw4yAN9Tv7EF2',\n        name: 'sfisherm@vha.com',\n        playingToday: true\n      },\n      {\n        uid: 'IMkuyDvmYNMYEIIfkV28HVmFZl62',\n        name: 'luis.gomez@aptitude.com',\n        playingToday: false\n      },\n      {\n        uid: 'PCLW3bxNgxPaq4bosKIpSiEFRYY2',\n        name: 'david.daniels@aptitude.com',\n        playingToday: false\n      },\n      {\n        uid: 'YeRVOKsi7sVhcsz75vATE9AZdRL2',\n        name: 'mike.nguchie@aptitude.com',\n        playingToday: false\n      },\n      {\n        uid: 'cDXTUxWBGwcPXsNzkRgc6x88uAR2',\n        name: 'barry.forrest@vizientinc.com',\n        playingToday: false\n      },\n      {\n        uid: 'sSNQFNHhzOOFhnPx7ydssl7gixr1',\n        name: 'richard.morgan@aptitude.com',\n        playingToday: false\n      },\n      {\n        uid: 'vok5IUKHdaRBPvNlEYzhtjNYy4t1',\n        name: 'kavya.katam@aptitude.com',\n        playingToday: false\n      }\n    ];\n\n    this.games = [\n      {\n        name: 'Carcassonne',\n        notes: 'Plays with six if you add the Inns & Cathedrals.',\n        numberOfPlayers: {\n          '0': { best: 56.4, not: 6.1, players: 2, recommended: 37.6 },\n          '1': { best: 47.3, not: 2.3, players: 3, recommended: 50.3 },\n          '2': { best: 31.7, not: 8.6, players: 4, recommended: 59.7 },\n          '3': { best: 12, not: 35.4, players: 5, recommended: 52.7 }\n        }\n      },\n      {\n        name: 'Jamaica',\n        numberOfPlayers: {\n          '0': { best: 3.9, not: 58.3, players: 2, recommended: 37.9 },\n          '1': { best: 8.2, not: 25.8, players: 3, recommended: 66 },\n          '2': { best: 33.6, not: 0.9, players: 4, recommended: 65.5 },\n          '3': { best: 45, not: 0, players: 5, recommended: 55 },\n          '4': { best: 70.9, not: 4.5, players: 6, recommended: 24.5 }\n        }\n      },\n      {\n        name: 'Augustus',\n        numberOfPlayers: {\n          '0': { best: 6.7, not: 20, players: 2, recommended: 73.3 },\n          '1': { best: 50.9, not: 0, players: 3, recommended: 49.1 },\n          '2': { best: 67.9, not: 0, players: 4, recommended: 32.1 },\n          '3': { best: 35.4, not: 4.2, players: 5, recommended: 60.4 },\n          '4': { best: 23.9, not: 15.2, players: 6, recommended: 60.9 }\n        }\n      },\n      {\n        name: 'No Thanks!',\n        numberOfPlayers: {\n          '0': { best: 1, not: 92.2, players: 2, recommended: 6.8 },\n          '1': { best: 17.5, not: 18.9, players: 3, recommended: 63.6 },\n          '2': { best: 57.7, not: 0, players: 4, recommended: 42.3 },\n          '3': { best: 73, not: 0.7, players: 5, recommended: 26.4 }\n        }\n      },\n      {\n        name: 'Rattus',\n        numberOfPlayers: {\n          '0': { best: 6.8, not: 45.9, players: 2, recommended: 47.3 },\n          '1': { best: 28.6, not: 3.9, players: 3, recommended: 67.5 },\n          '2': { best: 87.8, not: 2.4, players: 4, recommended: 9.8 }\n        }\n      },\n      {\n        name: 'Agricola: All Creatures Big and Small',\n        numberOfPlayers: {\n          '0': { best: 94, not: 1.2, players: 2, recommended: 4.8 }\n        }\n      },\n      {\n        name: 'Dice Town',\n        numberOfPlayers: {\n          '0': { best: 4.7, not: 53.5, players: 2, recommended: 41.9 },\n          '1': { best: 20.9, not: 16.3, players: 3, recommended: 62.8 },\n          '2': { best: 67.4, not: 2.2, players: 4, recommended: 30.4 },\n          '3': { best: 48.9, not: 6.4, players: 5, recommended: 44.7 }\n        }\n      },\n      {\n        name: 'Saboteur',\n        numberOfPlayers: {\n          '0': { best: 1.4, not: 83.7, players: 3, recommended: 15 },\n          '1': { best: 4.3, not: 58.4, players: 4, recommended: 37.3 },\n          '2': { best: 21.5, not: 8.6, players: 5, recommended: 69.9 },\n          '3': { best: 37.3, not: 6.5, players: 6, recommended: 56.2 },\n          '4': { best: 64.7, not: 1.2, players: 7, recommended: 34.1 },\n          '5': { best: 58.8, not: 4.1, players: 8, recommended: 37.2 },\n          '6': { best: 31.6, not: 9.6, players: 9, recommended: 58.8 },\n          '7': { best: 24.8, not: 14.3, players: 10, recommended: 60.9 }\n        }\n      },\n      {\n        name: 'Bang! The Dice Game',\n        numberOfPlayers: {\n          '0': { best: 0, not: 87.1, players: 3, recommended: 12.9 },\n          '1': { best: 3.5, not: 55.8, players: 4, recommended: 40.7 },\n          '2': { best: 32.6, not: 1.1, players: 5, recommended: 66.3 },\n          '3': { best: 68.8, not: 0, players: 6, recommended: 31.3 },\n          '4': { best: 64.8, not: 1.1, players: 7, recommended: 34.1 },\n          '5': { best: 39.5, not: 5.8, players: 8, recommended: 54.7 }\n        }\n      },\n      {\n        name: 'Cacao',\n        numberOfPlayers: {\n          '0': { best: 19.4, not: 6.5, players: 2, recommended: 74.2 },\n          '1': { best: 69.7, not: 3, players: 3, recommended: 27.3 },\n          '2': { best: 34.3, not: 5.7, players: 4, recommended: 60 }\n        }\n      },\n      {\n        name: 'Dominion',\n        numberOfPlayers: {\n          '0': { best: 38.4, not: 6, players: 2, recommended: 55.6 },\n          '1': { best: 56.7, not: 1, players: 3, recommended: 42.3 },\n          '2': { best: 39.6, not: 6.9, players: 4, recommended: 53.5 }\n        }\n      },\n      {\n        name: 'For Sale',\n        numberOfPlayers: {\n          '0': { best: 7.7, not: 19.6, players: 3, recommended: 72.6 },\n          '1': { best: 41.2, not: 0, players: 4, recommended: 58.8 },\n          '2': { best: 69.4, not: 1.2, players: 5, recommended: 29.5 },\n          '3': { best: 32.5, not: 8.8, players: 6, recommended: 58.8 }\n        }\n      },\n      {\n        name: 'High Society',\n        numberOfPlayers: {\n          '0': { best: 20, not: 21.5, players: 3, recommended: 58.5 },\n          '1': { best: 63.6, not: 0, players: 4, recommended: 36.4 },\n          '2': { best: 56.3, not: 3.1, players: 5, recommended: 40.6 }\n        }\n      },\n      {\n        name: 'Sushi Go',\n        numberOfPlayers: {\n          '0': { best: 5.7, not: 39.8, players: 2, recommended: 54.5 },\n          '1': { best: 44.9, not: 2.2, players: 3, recommended: 52.8 },\n          '2': { best: 71.1, not: 1, players: 4, recommended: 27.8 },\n          '3': { best: 33.3, not: 7.7, players: 5, recommended: 59 }\n        }\n      },\n      {\n        name: 'Coup Rebellion G54',\n        numberOfPlayers: {\n          '0': { best: 7.1, not: 28.6, players: 3, recommended: 64.3 },\n          '1': { best: 35.7, not: 0, players: 4, recommended: 64.3 },\n          '2': { best: 85.7, not: 0, players: 5, recommended: 14.3 },\n          '3': { best: 64.3, not: 7.1, players: 6, recommended: 28.6 }\n        }\n      },\n      {\n        name: 'Splendor',\n        numberOfPlayers: {\n          '0': { best: 34.5, not: 7.8, players: 2, recommended: 57.8 },\n          '1': { best: 53.2, not: 2, players: 3, recommended: 44.8 },\n          '2': { best: 37.5, not: 8.2, players: 4, recommended: 54.3 }\n        }\n      },\n      {\n        name: 'Settlers of Catan, The',\n        numberOfPlayers: {\n          '0': { best: 35, not: 7.1, players: 3, recommended: 57.9 },\n          '1': { best: 75.9, not: 2, players: 4, recommended: 22.1 }\n        }\n      },\n      {\n        name: 'Carcassonne: The Castle',\n        numberOfPlayers: {\n          '0': { best: 96.5, not: 0, players: 2, recommended: 3.5 }\n        }\n      }\n    ];\n  }\n\n  playingStatusChanged(event) {\n    console.log('playingStatusChanged');\n  }\n\n  signOut(event) {\n    console.log('signOut');\n  }\n\n  createRenderRoot() {\n    // This avoids us building our component with Shadow DOM so we can use Bootstrap\n    // or another CSS framework (which Shadow DOM would interfere with).\n    return this;\n  }\n\n  render() {\n    return html`\n      <nav-bar .user=\"${this.user}\" @sign-out=\"${this.signOut}\"></nav-bar>\n\n      <div class=\"container\">\n        <div class=\"row\">\n          <div class=\"col-md-4\">\n            <players-list\n              .user=\"${this.user}\"\n              .players=\"${this.players}\"\n              @playing-status-changed=\"${this.playingStatusChanged}\"\n            ></players-list>\n          </div>\n          <div class=\"col-md-8\">\n            <game-tabs\n              .games=\"${this.games}\"\n              .num-players=\"this.counts.playersIn\"\n            ></game-tabs>\n          </div>\n        </div>\n\n        <footer>\n          <div>\n            Copyright &copy; 2019\n            <a href=\"mailto:john.munsch@gmail.com\">John Munsch</a>\n          </div>\n        </footer>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define('main-page', MainPage);\n","import { LitElement, html } from '@polymer/lit-element';\n\nimport MainPage from './main-page.js';\n\nclass PlayingTodayApp extends LitElement {\n  createRenderRoot() {\n    return this;\n  }\n\n  render() {\n    return html`\n      <main-page></main-page>\n    `;\n  }\n}\n\ncustomElements.define('playing-today-app', PlayingTodayApp);\n"],"sourceRoot":""}